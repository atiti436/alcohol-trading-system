// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  INVESTOR
  EMPLOYEE
}

enum PaymentTerms {
  CASH
  WEEKLY
  MONTHLY
  SIXTY_DAYS
}

enum AlcoholCategory {
  WHISKY
  WINE
  SAKE
  BEER
  SPIRITS
  LIQUEUR
  OTHER
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  image         String?
  role          Role     @default(EMPLOYEE)
  investor_id   String?
  is_active     Boolean  @default(true)
  preferences   Json?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  created_purchases         Purchase[]
  created_sales             Sale[]
  created_accounting_entries AccountingEntry[]
  created_accounts_receivable AccountsReceivable[]
  created_payment_records   PaymentRecord[]

  @@map("users")
}

enum CustomerTier {
  VIP
  REGULAR
  PREMIUM
  NEW
}

model Customer {
  id                String       @id @default(cuid())
  customer_code     String       @unique
  name              String
  contact_person    String?
  phone             String?
  email             String?
  company           String?
  tax_id            String?
  address           String?
  shipping_address  String?
  tier              CustomerTier @default(REGULAR)
  payment_terms     PaymentTerms @default(CASH)
  requires_invoice  Boolean      @default(false)
  credit_limit      Float?
  notes             String?
  is_active         Boolean      @default(true)
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt

  // Relations
  sales                 Sale[]
  special_prices        CustomerSpecialPrice[]
  accounts_receivables  AccountsReceivable[]

  @@map("customers")
}

model Product {
  id                   String           @id @default(cuid())
  product_code         String           @unique
  name                 String
  category             AlcoholCategory
  volume_ml            Int
  alc_percentage       Float
  weight_kg            Float
  package_weight_kg    Float?
  total_weight_kg      Float?
  has_box              Boolean          @default(false)
  has_accessories      Boolean          @default(false)
  accessory_weight_kg  Float?
  accessories          String[]
  hs_code              String?
  supplier             String?
  manufacturing_date   String?
  expiry_date          String?
  standard_price       Float
  current_price        Float
  cost_price           Float            @default(0)
  min_price            Float
  is_active            Boolean          @default(true)
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt

  // Relations
  variants       ProductVariant[]
  purchase_items PurchaseItem[]
  sale_items     SaleItem[]
  special_prices CustomerSpecialPrice[]

  @@map("products")
}

enum VariantType {
  A // Normal
  B // Annual Limited
  C // Commemorative
  D // Special Limited
  X // Damaged
}

model ProductVariant {
  id                String      @id @default(cuid())
  product_id        String
  variant_code      String      @unique
  sku               String      @unique
  variant_type      VariantType
  description       String
  base_price        Float
  current_price     Float
  discount_rate     Float?
  limited_edition   Boolean     @default(false)
  production_year   Int?
  serial_number     String?
  condition         String      @default("Normal")
  stock_quantity    Int         @default(0)
  reserved_stock    Int         @default(0)
  available_stock   Int         @default(0)
  cost_price        Float       @default(0)
  weight_kg         Float       @default(0)
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt

  // Relations
  product             Product             @relation(fields: [product_id], references: [id], onDelete: Cascade)
  sale_items          SaleItem[]
  inventory_movements InventoryMovement[]

  @@unique([product_id, variant_type])
  @@map("product_variants")
}

model CustomerSpecialPrice {
  id              String   @id @default(cuid())
  customer_id     String
  product_id      String
  standard_price  Float
  special_price   Float
  discount_amount Float
  discount_rate   Float
  reason          String
  effective_date  DateTime
  expiry_date     DateTime?
  is_active       Boolean  @default(true)
  notes           String?
  created_by      String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  customer Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([customer_id, product_id])
  @@map("customer_special_prices")
}

model InventoryMovement {
  id              String   @id @default(cuid())
  variant_id      String
  movement_type   String   // 'PURCHASE' | 'SALE' | 'ADJUSTMENT' | 'TRANSFER'
  adjustment_type String?  // 'ADD' | 'SUBTRACT' | 'SET'
  quantity        Int
  previous_stock  Int
  new_stock       Int
  reason          String
  notes           String?
  reference_id    String?
  reference_type  String?
  created_by      String
  created_at      DateTime @default(now())

  // Relations
  variant ProductVariant @relation(fields: [variant_id], references: [id], onDelete: Cascade)

  @@map("inventory_movements")
}

model Purchase {
  id                  String         @id @default(cuid())
  purchase_number     String         @unique
  funding_source      String         // 'COMPANY' | 'PERSONAL'
  supplier            String
  currency            String         @default("JPY")
  exchange_rate       Float
  total_amount        Float
  status              String         @default("PENDING")
  declaration_number  String?
  declaration_date    DateTime?
  received_date       DateTime?
  notes               String?
  created_by          String
  created_at          DateTime       @default(now())
  updated_at          DateTime       @updatedAt

  // Relations
  creator   User           @relation(fields: [created_by], references: [id])
  items     PurchaseItem[]
  receipts  GoodsReceipt[]

  @@map("purchases")
}

model PurchaseItem {
  id                String   @id @default(cuid())
  purchase_id       String
  product_id        String?
  product_name      String
  quantity          Int
  unit_price        Float
  total_price       Float
  dutiable_value    Float?
  tariff_code       String?
  import_duty_rate  Float?
  alc_percentage    Float?
  volume_ml         Int?
  weight_kg         Float?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  purchase Purchase @relation(fields: [purchase_id], references: [id], onDelete: Cascade)
  product  Product? @relation(fields: [product_id], references: [id])

  @@map("purchase_items")
}

model GoodsReceipt {
  id                  String   @id @default(cuid())
  purchase_id         String
  actual_quantity     Int
  exchange_rate       Float
  loss_type           String
  loss_quantity       Int      @default(0)
  inspection_fee      Float?
  allocation_method   String
  total_cost          Float
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  // Relations
  purchase         Purchase         @relation(fields: [purchase_id], references: [id], onDelete: Cascade)
  additional_costs AdditionalCost[]

  @@map("goods_receipts")
}

model AdditionalCost {
  id                String   @id @default(cuid())
  goods_receipt_id  String
  type              String
  amount            Float
  description       String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  goods_receipt GoodsReceipt @relation(fields: [goods_receipt_id], references: [id], onDelete: Cascade)

  @@map("additional_costs")
}

model Sale {
  id              String       @id @default(cuid())
  sale_number     String       @unique
  customer_id     String
  total_amount    Float
  actual_amount   Float?
  commission      Float?
  funding_source  String
  payment_terms   PaymentTerms @default(CASH)
  is_paid         Boolean      @default(false)
  paid_at         DateTime?
  due_date        DateTime?
  notes           String?
  created_by      String
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  // Relations
  customer              Customer             @relation(fields: [customer_id], references: [id])
  creator               User                 @relation(fields: [created_by], references: [id])
  items                 SaleItem[]
  accounts_receivables  AccountsReceivable[]

  @@map("sales")
}

model SaleItem {
  id                    String   @id @default(cuid())
  sale_id               String
  product_id            String
  variant_id            String?
  quantity              Int
  unit_price            Float
  actual_unit_price     Float?
  total_price           Float
  actual_total_price    Float?
  is_personal_purchase  Boolean  @default(false)
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  // Relations
  sale     Sale            @relation(fields: [sale_id], references: [id], onDelete: Cascade)
  product  Product         @relation(fields: [product_id], references: [id])
  variant  ProductVariant? @relation(fields: [variant_id], references: [id])

  @@map("sale_items")
}

model AuditLog {
  id                      String   @id @default(cuid())
  user_id                 String
  user_email              String
  user_role               Role
  action                  String
  table_name              String
  record_id               String?
  sensitive_fields        Json?
  ip_address              String?
  user_agent              String?
  timestamp               DateTime @default(now())
  accessed_actual_price   Boolean  @default(false)
  accessed_commission     Boolean  @default(false)
  accessed_personal_data  Boolean  @default(false)

  @@map("audit_logs")
}

model AccountingEntry {
  id              String   @id @default(cuid())
  entry_number    String   @unique
  entry_date      DateTime
  entry_type      String
  reference_id    String?
  reference_type  String?
  description     String
  total_amount    Float
  is_posted       Boolean  @default(false)
  notes           String?
  created_by      String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  creator          User           @relation(fields: [created_by], references: [id])
  journal_entries  JournalEntry[]

  @@map("accounting_entries")
}

model JournalEntry {
  id                  String   @id @default(cuid())
  accounting_entry_id String
  account_code        String
  account_name        String
  debit_amount        Float    @default(0)
  credit_amount       Float    @default(0)
  description         String?
  created_at          DateTime @default(now())

  // Relations
  accounting_entry AccountingEntry @relation(fields: [accounting_entry_id], references: [id], onDelete: Cascade)

  @@map("journal_entries")
}

model AccountsReceivable {
  id                String   @id @default(cuid())
  ar_number         String   @unique
  customer_id       String
  sale_id           String
  original_amount   Float
  remaining_amount  Float
  due_date          DateTime
  status            String   @default("OUTSTANDING")
  days_past_due     Int      @default(0)
  notes             String?
  created_by        String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  customer  Customer        @relation(fields: [customer_id], references: [id])
  sale      Sale            @relation(fields: [sale_id], references: [id])
  creator   User            @relation(fields: [created_by], references: [id])
  payments  PaymentRecord[]

  @@map("accounts_receivable")
}

model PaymentRecord {
  id                      String   @id @default(cuid())
  payment_number          String   @unique
  accounts_receivable_id  String
  payment_amount          Float
  payment_date            DateTime
  payment_method          String
  reference_number        String?
  notes                   String?
  created_by              String
  created_at              DateTime @default(now())

  // Relations
  accounts_receivable AccountsReceivable @relation(fields: [accounts_receivable_id], references: [id])
  creator             User             @relation(fields: [created_by], references: [id])

  @@map("payment_records")
}
