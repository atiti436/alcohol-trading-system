generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String               @id @default(cuid())
  email                       String               @unique
  name                        String
  image                       String?
  role                        Role                 @default(EMPLOYEE)
  investor_id                 String?
  is_active                   Boolean              @default(true)
  preferences                 Json?
  created_at                  DateTime             @default(now())
  updated_at                  DateTime             @updatedAt
  created_accounting_entries  AccountingEntry[]
  created_accounts_receivable AccountsReceivable[]
  created_payment_records     PaymentRecord[]
  created_accounts_payable    AccountsPayable[]
  created_supplier_payments   SupplierPayment[]
  created_purchases           Purchase[]
  created_quotations          Quotation[]
  created_sales               Sale[]
  created_cashflow_records    CashFlowRecord[]

  // 🆕 重構新增的關聯
  created_stock_transfers  StockTransfer[]
  created_imports          Import[]            @relation("ImportCreator")
  finalized_imports        Import[]            @relation("ImportFinalizer")
  created_import_costs     ImportCost[]
  created_cost_adjustments CostAdjustmentLog[]
  notifications            Notification[]

  @@map("users")
}

model Customer {
  id                   String                 @id @default(cuid())
  customer_code        String                 @unique
  name                 String
  contact_person       String?
  phone                String?
  email                String?
  company              String?
  tax_id               String?
  address              String?
  shipping_address     String?
  tier                 CustomerTier           @default(REGULAR)
  payment_terms        PaymentTerms           @default(CASH)
  requires_invoice     Boolean                @default(false)
  credit_limit         Float?
  notes                String?
  is_active            Boolean                @default(true)
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  accounts_receivables AccountsReceivable[]
  special_prices       CustomerSpecialPrice[]
  quotations           Quotation[]
  sales                Sale[]
  shipping_orders      ShippingOrder[]

  @@map("customers")
}

// 應付帳款分類
enum ApCategory {
  PURCHASE
  FREIGHT
  TAX
  WAREHOUSE
  ADMIN
  OTHER
}

model Product {
  id                  String          @id @default(cuid())
  product_code        String          @unique
  name                String
  category            AlcoholCategory
  volume_ml           Int
  alc_percentage      Float
  weight_kg           Float
  package_weight_kg   Float?
  total_weight_kg     Float?
  has_box             Boolean         @default(false)
  has_accessories     Boolean         @default(false)
  accessory_weight_kg Float?
  accessories         String[]
  hs_code             String?
  supplier            String?
  manufacturing_date  String?
  expiry_date         String?

  // 🎯 三層價格架構（⚠️ DEPRECATED - 2025-10-01 起統一使用變體層級價格）
  // @deprecated Product 層級價格已棄用，請使用 ProductVariant 的價格欄位
  // Product 僅作為容器，實際價格管理在變體層級
  cost_price     Float @default(0) // @deprecated
  investor_price Float @default(0) // @deprecated
  actual_price   Float @default(0) // @deprecated
  standard_price Float @default(0) // @deprecated
  current_price  Float @default(0) // @deprecated
  min_price      Float @default(0) // @deprecated

  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // 關聯
  special_prices CustomerSpecialPrice[]
  variants       ProductVariant[]
  purchase_items PurchaseItem[]
  quotations     Quotation[]
  sale_items     SaleItem[]
  shipping_items ShippingItem[]

  @@map("products")
}

model ProductVariant {
  id           String @id @default(cuid())
  product_id   String
  variant_code String @unique
  variant_type String @db.VarChar(100)
  description  String

  // 🎯 三層價格架構
  cost_price     Float  @default(0) // 成本價（真實成本）
  investor_price Float  @default(0) // 投資方期望售價（INVESTOR 可見可改）
  actual_price   Float  @default(0) // 實際售價（僅 SUPER_ADMIN 可見可改）
  current_price  Float  @default(0) // 顯示用價格（向下相容）
  base_price     Float? // 向下相容（保留舊資料）

  discount_rate   Float?
  limited_edition Boolean @default(false)
  production_year Int?
  serial_number   String?
  condition       String  @default("Normal")

  // 📦 庫存管理 (移至獨立 Inventory 表)
  // 向下相容：保留這些欄位但標記為 deprecated
  stock_quantity  Int @default(0) // @deprecated 請使用 Inventory 表
  reserved_stock  Int @default(0) // @deprecated 請使用 Inventory 表
  available_stock Int @default(0) // @deprecated 請使用 Inventory 表

  weight_kg Float @default(0)

  // ✅ 停用機制
  is_active Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  sku        String   @unique

  // 關聯
  inventory           Inventory[]
  inventory_movements InventoryMovement[]
  product             Product             @relation(fields: [product_id], references: [id], onDelete: Cascade)
  sale_items          SaleItem[]
  shipping_items      ShippingItem[]
  source_transfers    StockTransfer[]     @relation("SourceVariant")
  target_transfers    StockTransfer[]     @relation("TargetVariant")
  import_items        ImportItem[]

  @@map("product_variants")
}

// 🏭 獨立庫存表 (支援多倉庫)
model Inventory {
  id         String    @id @default(cuid())
  variant_id String
  warehouse  Warehouse // COMPANY 或 PRIVATE

  // 📦 庫存數量
  quantity        Int     @default(0) // 總庫存
  reserved        Int     @default(0) // 已預留（訂單鎖定）
  available       Int     @default(0) // 可售庫存 = quantity - reserved

  // 💰 成本價（加權平均）
  cost_price      Decimal @default(0) @db.Decimal(10, 2)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // 關聯
  variant ProductVariant @relation(fields: [variant_id], references: [id], onDelete: Cascade)

  // 唯一約束：一個變體在同一個倉庫只能有一筆庫存記錄
  @@unique([variant_id, warehouse])
  @@index([warehouse])
  @@map("inventories")
}

model CustomerSpecialPrice {
  id              String    @id @default(cuid())
  customer_id     String
  product_id      String
  standard_price  Float
  special_price   Float
  discount_amount Float
  discount_rate   Float
  reason          String
  effective_date  DateTime
  expiry_date     DateTime?
  is_active       Boolean   @default(true)
  notes           String?
  created_by      String
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  customer        Customer  @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  product         Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([customer_id, product_id])
  @@map("customer_special_prices")
}

model InventoryMovement {
  id              String   @id @default(cuid())
  variant_id      String
  movement_type   String
  adjustment_type String?
  reason          String
  notes           String?
  reference_id    String?
  reference_type  String?
  created_by      String?
  created_at      DateTime @default(now())
  quantity_after  Int
  quantity_before Int
  quantity_change Int
  total_cost      Float    @default(0)
  unit_cost       Float    @default(0)

  // 🏪 倉庫標記
  warehouse Warehouse @default(COMPANY)

  variant ProductVariant @relation(fields: [variant_id], references: [id], onDelete: Cascade)

  @@index([warehouse])
  @@map("inventory_movements")
}

model Purchase {
  id                 String            @id @default(cuid())
  purchase_number    String            @unique
  funding_source     String
  supplier           String
  currency           String            @default("JPY")
  exchange_rate      Float
  total_amount       Float
  status             String            @default("PENDING")
  declaration_number String?
  declaration_date   DateTime?
  received_date      DateTime?
  notes              String?
  created_by         String
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  receipts           GoodsReceipt[]
  items              PurchaseItem[]
  accounts_payable   AccountsPayable[]
  creator            User              @relation(fields: [created_by], references: [id])
  Import             Import[]

  @@map("purchases")
}

model PurchaseItem {
  id               String   @id @default(cuid())
  purchase_id      String
  product_id       String?
  product_name     String
  quantity         Int
  unit_price       Float
  total_price      Float
  dutiable_value   Float?
  tariff_code      String?
  import_duty_rate Float?
  alc_percentage   Float?
  volume_ml        Int?
  weight_kg        Float?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  product          Product? @relation(fields: [product_id], references: [id])
  purchase         Purchase @relation(fields: [purchase_id], references: [id], onDelete: Cascade)

  @@map("purchase_items")
}

model GoodsReceipt {
  id                String           @id @default(cuid())
  purchase_id       String
  actual_quantity   Int
  exchange_rate     Float
  loss_type         String
  loss_quantity     Int              @default(0)
  inspection_fee    Float?
  allocation_method String
  total_cost        Float
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  additional_costs  AdditionalCost[]
  purchase          Purchase         @relation(fields: [purchase_id], references: [id], onDelete: Cascade)

  @@map("goods_receipts")
}

model AdditionalCost {
  id               String       @id @default(cuid())
  goods_receipt_id String
  type             String
  amount           Float
  description      String?
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  goods_receipt    GoodsReceipt @relation(fields: [goods_receipt_id], references: [id], onDelete: Cascade)

  @@map("additional_costs")
}

model Sale {
  id                   String               @id @default(cuid())
  sale_number          String               @unique
  customer_id          String
  total_amount         Float
  actual_amount        Float?
  commission           Float?
  funding_source       String
  payment_terms        PaymentTerms         @default(CASH)
  is_paid              Boolean              @default(false)
  paid_at              DateTime?
  due_date             DateTime?
  notes                String?
  created_by           String
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  confirmed_at         DateTime?
  confirmed_by         String?
  status               SaleStatus           @default(DRAFT)
  accounts_receivables AccountsReceivable[]
  items                SaleItem[]
  creator              User                 @relation(fields: [created_by], references: [id])
  customer             Customer             @relation(fields: [customer_id], references: [id])
  shipping_orders      ShippingOrder[]

  @@map("sales")
}

model SaleItem {
  id                   String  @id @default(cuid())
  sale_id              String
  product_id           String
  variant_id           String?
  quantity             Int
  unit_price           Float
  actual_unit_price    Float?
  total_price          Float
  actual_total_price   Float?
  is_personal_purchase Boolean @default(false)

  // 🎯 成本與利潤追蹤
  cost_price Float? // 銷售時的加權平均成本
  profit     Float? // 利潤 = actual_unit_price - cost_price
  import_id  String? // 關聯進貨單（用於成本回溯調整）

  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  product        Product         @relation(fields: [product_id], references: [id])
  sale           Sale            @relation(fields: [sale_id], references: [id], onDelete: Cascade)
  variant        ProductVariant? @relation(fields: [variant_id], references: [id])
  import         Import?         @relation(fields: [import_id], references: [id], onDelete: SetNull)
  shipping_items ShippingItem[]

  @@index([import_id])
  @@map("sale_items")
}

model AccountingEntry {
  id              String         @id @default(cuid())
  entry_number    String         @unique
  entry_date      DateTime
  entry_type      String
  reference_id    String?
  reference_type  String?
  description     String
  total_amount    Float
  is_posted       Boolean        @default(false)
  notes           String?
  created_by      String
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  creator         User           @relation(fields: [created_by], references: [id])
  journal_entries JournalEntry[]

  @@map("accounting_entries")
}

model JournalEntry {
  id                  String          @id @default(cuid())
  accounting_entry_id String
  account_code        String
  account_name        String
  debit_amount        Float           @default(0)
  credit_amount       Float           @default(0)
  description         String?
  created_at          DateTime        @default(now())
  accounting_entry    AccountingEntry @relation(fields: [accounting_entry_id], references: [id], onDelete: Cascade)

  @@map("journal_entries")
}

model AccountsReceivable {
  id               String          @id @default(cuid())
  ar_number        String          @unique
  customer_id      String
  sale_id          String
  original_amount  Float
  remaining_amount Float
  due_date         DateTime
  status           String          @default("OUTSTANDING")
  days_past_due    Int             @default(0)
  notes            String?
  created_by       String
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  creator          User            @relation(fields: [created_by], references: [id])
  customer         Customer        @relation(fields: [customer_id], references: [id])
  sale             Sale            @relation(fields: [sale_id], references: [id])
  payments         PaymentRecord[]

  @@map("accounts_receivable")
}

model PaymentRecord {
  id                     String             @id @default(cuid())
  payment_number         String             @unique
  accounts_receivable_id String
  payment_amount         Float
  payment_date           DateTime
  payment_method         String
  reference_number       String?
  notes                  String?
  created_by             String
  created_at             DateTime           @default(now())
  accounts_receivable    AccountsReceivable @relation(fields: [accounts_receivable_id], references: [id])
  creator                User               @relation(fields: [created_by], references: [id])

  @@map("payment_records")
}

// 應付帳款表 - 我們欠供應商的錢
model AccountsPayable {
  id               String            @id @default(cuid())
  ap_number        String            @unique
  purchase_id      String?
  supplier_name    String
  original_amount  Float
  remaining_amount Float
  due_date         DateTime
  status           String            @default("PENDING") // PENDING, OVERDUE, PAID, PARTIAL
  days_past_due    Int               @default(0)
  ap_category      ApCategory        @default(PURCHASE)
  reference        String?
  notes            String?
  created_by       String
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  creator          User              @relation(fields: [created_by], references: [id])
  purchase         Purchase?         @relation(fields: [purchase_id], references: [id])
  payments         SupplierPayment[]

  @@map("accounts_payable")
}

// 供應商付款記錄
model SupplierPayment {
  id                  String          @id @default(cuid())
  payment_number      String          @unique
  accounts_payable_id String
  payment_amount      Float
  payment_date        DateTime
  payment_method      String // CASH, BANK_TRANSFER, CHECK, CREDIT_CARD, OTHER
  reference_number    String?
  notes               String?
  created_by          String
  created_at          DateTime        @default(now())
  accounts_payable    AccountsPayable @relation(fields: [accounts_payable_id], references: [id])
  creator             User            @relation(fields: [created_by], references: [id])

  @@map("supplier_payments")
}

model Quotation {
  id            String          @id @default(cuid())
  quote_number  String          @unique
  customer_id   String
  product_id    String?
  product_name  String
  quantity      Int
  unit_price    Float
  total_amount  Float
  special_notes String?
  status        QuotationStatus @default(PENDING)
  valid_until   DateTime?
  quoted_by     String
  source        String          @default("WEB")
  line_user_id  String?
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  customer      Customer        @relation(fields: [customer_id], references: [id])
  product       Product?        @relation(fields: [product_id], references: [id])
  quoter        User            @relation(fields: [quoted_by], references: [id])

  @@map("quotations")
}

model ShippingOrder {
  id               String         @id @default(cuid())
  shipping_number  String         @unique
  sale_id          String
  customer_id      String
  shipping_address String
  shipping_method  String         @default("DELIVERY")
  tracking_number  String?
  status           String         @default("PENDING")
  shipped_at       DateTime?
  delivered_at     DateTime?
  notes            String?
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  items            ShippingItem[]
  customer         Customer       @relation(fields: [customer_id], references: [id])
  sale             Sale           @relation(fields: [sale_id], references: [id])

  @@map("shipping_orders")
}

model ShippingItem {
  id                String          @id @default(cuid())
  shipping_order_id String
  sale_item_id      String
  product_id        String
  variant_id        String?
  quantity          Int
  unit_price        Float
  total_price       Float
  created_at        DateTime        @default(now())
  product           Product         @relation(fields: [product_id], references: [id])
  sale_item         SaleItem        @relation(fields: [sale_item_id], references: [id])
  shipping_order    ShippingOrder   @relation(fields: [shipping_order_id], references: [id], onDelete: Cascade)
  variant           ProductVariant? @relation(fields: [variant_id], references: [id])

  @@map("shipping_items")
}

// ⚠️ 舊版進貨記錄 - 保留用於資料遷移
model LegacyImportRecord {
  id                  String             @id @default(cuid())
  import_number       String             @unique
  purchase_id         String
  purchase_number     String
  supplier            String
  declaration_number  String?
  declaration_date    DateTime?
  total_value         Float
  currency            String             @default("TWD")
  exchange_rate       Float              @default(1.0)
  status              String             @default("PENDING")
  alcohol_tax         Float              @default(0)
  business_tax        Float              @default(0)
  trade_promotion_fee Float              @default(0)
  total_taxes         Float              @default(0)
  extracted_data      String?
  notes               String?
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  items               LegacyImportItem[]

  @@map("import_records")
}

// ⚠️ 舊版進貨明細 - 保留用於資料遷移
model LegacyImportItem {
  id                 String             @id @default(cuid())
  import_record_id   String
  product_name       String
  quantity           Int
  alcohol_percentage Float              @default(40)
  volume             Int                @default(700)
  dutiable_value     Float
  alcohol_tax        Float              @default(0)
  business_tax       Float              @default(0)
  tariff_code        String?
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  import_record      LegacyImportRecord @relation(fields: [import_record_id], references: [id], onDelete: Cascade)

  @@map("import_items")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("system_settings")
}

enum Role {
  SUPER_ADMIN
  INVESTOR
  EMPLOYEE
  PENDING
}

enum PaymentTerms {
  CASH
  WEEKLY
  MONTHLY
  SIXTY_DAYS
}

enum SaleStatus {
  DRAFT
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum AlcoholCategory {
  WHISKY
  WINE
  SAKE
  BEER
  SPIRITS
  LIQUEUR
  OTHER
}

enum CustomerTier {
  VIP
  REGULAR
  PREMIUM
  NEW
}

enum QuotationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

// 審計日誌模型
model AuditLog {
  id              String            @id @default(cuid())
  user_id         String
  user_email      String
  user_role       Role
  action          AuditAction
  resource_type   AuditResourceType
  resource_id     String?
  details         Json?
  ip_address      String?
  user_agent      String?
  additional_info Json?
  created_at      DateTime          @default(now())

  @@index([user_id])
  @@index([created_at])
  @@index([action])
  @@index([resource_type])
  @@map("audit_logs")
}

// 審計操作類型
enum AuditAction {
  READ
  WRITE
  DELETE
  LOGIN
  LOGOUT
  PERMISSION_CHANGE
  DATA_FILTERING
  SENSITIVE_ACCESS
}

// 資源類型
enum ResourceType {
  USERS
  CUSTOMERS
  PRODUCTS
  SALES
  PURCHASES
  INVENTORY
  SETTINGS
  REPORTS
  LINEBOT
}

// 審計資源類型
enum AuditResourceType {
  USERS
  CUSTOMERS
  PRODUCTS
  SALES
  PURCHASES
  INVENTORY
  SETTINGS
  REPORTS
  LINEBOT
  CASHFLOW
}

// 💰 簡單收支記錄模型
model CashFlowRecord {
  id               String        @id @default(cuid())
  type             CashFlowType // 收入或支出
  amount           Float // 金額
  description      String // 描述
  category         String? // 分類（可選）
  funding_source   FundingSource // 資金來源：投資方或個人墊付
  transaction_date DateTime // 交易日期
  reference        String? // 參考編號（發票號碼、訂單編號等）
  notes            String? // 備註
  created_by       String // 記錄創建者
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  // 關聯
  creator User @relation(fields: [created_by], references: [id])

  @@index([type])
  @@index([funding_source])
  @@index([transaction_date])
  @@index([created_by])
  @@map("cashflow_records")
}

// 公司設定表
model CompanySettings {
  id           String   @id @default(cuid())
  name         String // 公司名稱
  englishName  String? // 英文名稱
  address      String // 公司地址
  phone        String // 聯絡電話
  email        String? // 電子信箱
  website      String? // 官方網站
  taxId        String // 統一編號
  bankName     String? // 銀行名稱
  bankAccount  String? // 帳戶號碼
  bankCode     String? // 銀行代碼
  // 現代聯絡方式
  lineId       String? // LINE ID
  customField1 String? // 自訂欄位1 (如 WeChat ID)
  customField2 String? // 自訂欄位2 (如 Telegram)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map("company_settings")
}

// 收支類型
enum CashFlowType {
  INCOME // 收入
  EXPENSE // 支出
}

// 資金來源
enum FundingSource {
  INVESTOR // 投資方資金
  PERSONAL // 個人墊付
  COMPANY // 公司資金
}

// ========== 🆕 重構新增的模型 (2025-10-01) ==========

// 🏪 倉庫類型
enum Warehouse {
  COMPANY // 公司倉（投資方資金）
  PRIVATE // 個人倉（個人資金）
}

// 📦 品號調撥記錄
model StockTransfer {
  id              String @id @default(cuid())
  transfer_number String @unique

  // 來源變體
  source_variant_id   String
  source_variant_code String

  // 目標變體
  target_variant_id   String
  target_variant_code String

  // 調撥數量
  quantity Int

  // 成本繼承
  unit_cost  Float
  total_cost Float

  // 調撥原因
  reason String // 'DAMAGED', 'REPACKAGE', 'OTHER'
  notes  String?

  // 審計欄位
  created_by String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // 關聯
  source_variant ProductVariant @relation("SourceVariant", fields: [source_variant_id], references: [id], onDelete: Restrict)
  target_variant ProductVariant @relation("TargetVariant", fields: [target_variant_id], references: [id], onDelete: Restrict)
  creator        User           @relation(fields: [created_by], references: [id])

  @@index([source_variant_id])
  @@index([target_variant_id])
  @@index([created_at])
  @@map("stock_transfers")
}

// 🚚 進貨單（重新設計）
model Import {
  id            String @id @default(cuid())
  import_number String @unique

  // 關聯採購單
  purchase_id     String?
  purchase_number String?

  // 進貨類型
  import_type String    @default("COMPANY") // 'COMPANY', 'PRIVATE'
  warehouse   Warehouse @default(COMPANY)

  // 供應商資訊
  supplier String

  // 幣別與匯率
  currency      String @default("JPY")
  exchange_rate Float  @default(1.0)

  // 報關資訊
  declaration_number String?
  declaration_date   DateTime?
  customs_date       DateTime?

  // 海關抽驗
  customs_seized  Boolean @default(false)
  seized_quantity Int     @default(0)

  // 商品總價（未稅）
  goods_total Float

  // 關稅（個別計算）
  tariff_amount Float @default(0)

  // 費用總額（待後續加入）
  additional_costs_total Float @default(0)

  // 最終總成本
  final_total_cost Float @default(0)

  // 結算狀態
  is_finalized Boolean   @default(false)
  finalized_at DateTime?
  finalized_by String?

  // 進貨狀態
  status String @default("PENDING") // 'PENDING', 'IN_TRANSIT', 'CUSTOMS', 'RECEIVED', 'FINALIZED'

  // 備註
  notes String?

  // 審計欄位
  created_by String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // 關聯
  purchase             Purchase?           @relation(fields: [purchase_id], references: [id], onDelete: SetNull)
  creator              User                @relation("ImportCreator", fields: [created_by], references: [id])
  finalizer            User?               @relation("ImportFinalizer", fields: [finalized_by], references: [id])
  items                ImportItem[]
  costs                ImportCost[]
  cost_adjustment_logs CostAdjustmentLog[]
  sale_items           SaleItem[]

  @@index([purchase_id])
  @@index([warehouse])
  @@index([status])
  @@index([created_at])
  @@map("imports")
}

// 📋 進貨明細（新版）
model ImportItem {
  id        String @id @default(cuid())
  import_id String

  // 商品資訊
  variant_id   String
  variant_code String
  product_name String

  // 數量
  ordered_quantity  Int
  received_quantity Int
  damaged_quantity  Int @default(0)

  // 單價與小計
  unit_price Float
  subtotal   Float

  // 關稅（個別商品）
  tariff_rate   Float?
  tariff_amount Float  @default(0)

  // 分攤後費用
  allocated_costs Float @default(0)

  // 最終單位成本
  final_unit_cost Float @default(0)

  // 審計欄位
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // 關聯
  import  Import         @relation(fields: [import_id], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variant_id], references: [id], onDelete: Restrict)

  @@index([import_id])
  @@index([variant_id])
  @@map("import_items_v2")
}

// 💰 進貨費用池
model ImportCost {
  id        String @id @default(cuid())
  import_id String

  // 費用類型
  cost_type String // 'INSPECTION', 'CUSTOMS_FEE', 'SHIPPING', 'STORAGE', 'OTHER'
  cost_name String

  // 金額
  amount   Float
  currency String @default("TWD")

  // 分攤方式
  allocation_method String @default("BY_AMOUNT") // 'BY_AMOUNT', 'BY_QUANTITY', 'INDIVIDUAL'

  // 發票/單據資訊
  invoice_number String?
  invoice_date   DateTime?

  // 付款狀態
  is_paid Boolean   @default(false)
  paid_at DateTime?

  // 備註
  notes String?

  // 審計欄位
  created_by String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // 關聯
  import  Import @relation(fields: [import_id], references: [id], onDelete: Cascade)
  creator User   @relation(fields: [created_by], references: [id])

  @@index([import_id])
  @@index([cost_type])
  @@index([is_paid])
  @@map("import_costs")
}

// 📊 成本調整歷史
model CostAdjustmentLog {
  id        String @id @default(cuid())
  import_id String

  // 調整資訊
  adjustment_type String // 'FINALIZE', 'MANUAL'
  old_cost        Float
  new_cost        Float
  cost_diff       Float

  // 影響範圍
  affected_sales_count Int   @default(0)
  total_adjustment     Float @default(0)

  // 說明
  reason String?

  // 審計欄位
  created_by String
  created_at DateTime @default(now())

  // 關聯
  import  Import @relation(fields: [import_id], references: [id], onDelete: Cascade)
  creator User   @relation(fields: [created_by], references: [id])

  @@index([import_id])
  @@index([created_at])
  @@map("cost_adjustment_logs")
}

// 🔔 通知系統
model Notification {
  id String @id @default(cuid())

  // 通知類型
  type String // 'IMPORT_FINALIZED', 'STOCK_LOW', 'PAYMENT_DUE', 'SHIPMENT_REMINDER', 'PRICE_ALERT'

  // 通知內容
  title   String
  message String
  link    String?

  // 接收者
  recipient_id   String
  recipient_role Role?

  // 優先級
  priority String @default("NORMAL") // 'LOW', 'NORMAL', 'HIGH', 'URGENT'

  // 閱讀狀態
  is_read Boolean   @default(false)
  read_at DateTime?

  // 相關資源
  resource_type String?
  resource_id   String?

  // 審計欄位
  created_at DateTime  @default(now())
  expires_at DateTime?

  // 關聯
  recipient User @relation(fields: [recipient_id], references: [id], onDelete: Cascade)

  @@index([recipient_id])
  @@index([is_read])
  @@index([created_at])
  @@index([type])
  @@map("notifications")
}
