// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  INVESTOR
  EMPLOYEE
}

enum PaymentTerms {
  CASH
  WEEKLY
  MONTHLY
  SIXTY_DAYS
}

enum AlcoholCategory {
  WHISKY
  WINE
  SAKE
  BEER
  SPIRITS
  LIQUEUR
  OTHER
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  image       String?
  role        Role     @default(EMPLOYEE)
  investorId  String?  // 投資方關聯ID
  isActive    Boolean  @default(true)
  preferences Json?    // 個人偏好設定
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 關聯表
  createdPurchases        Purchase[]
  createdSales           Sale[]
  createdAccountingEntries AccountingEntry[]
  createdAccountsReceivable AccountsReceivable[]
  createdPaymentRecords   PaymentRecord[]

  @@map("users")
}

enum CustomerTier {
  VIP
  REGULAR
  PREMIUM
  NEW
}

model Customer {
  id              String       @id @default(cuid())
  customer_code   String       @unique // C00001, C00002 等
  name            String
  contact_person  String?      // 主要聯絡人
  phone           String?
  email           String?
  company         String?      // 公司名稱
  tax_id          String?      // 統一編號
  address         String?      // 聯絡地址
  shipping_address String?     // 送貨地址
  tier            CustomerTier @default(REGULAR)
  paymentTerms    PaymentTerms @default(CASH)
  requiresInvoice Boolean      @default(false)
  credit_limit    Float?       // 信用額度
  notes           String?
  isActive        Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // 關聯表
  sales Sale[]
  specialPrices CustomerSpecialPrice[]

  @@map("customers")
}

model Product {
  id               String           @id @default(cuid())
  product_code     String           @unique // P00001, P00002 等
  code             String           @unique // 保留向後相容性
  name             String
  category         AlcoholCategory
  volume_ml        Int              // 容量(ml) - 統一命名規範
  alc_percentage   Float            // 酒精度(%) - 統一命名規範
  weight           Float            // 商品重量(kg)
  packageWeight    Float?           // 外盒重量(kg)
  totalWeight      Float?           // 總重量(kg)
  hasBox           Boolean          @default(false)
  hasAccessories   Boolean          @default(false)
  accessoryWeight  Float?           // 附件重量(kg)
  accessories      String[]         // 附件清單
  hsCode           String?          // 稅則號列
  supplier         String?
  manufacturingDate String?
  expiryDate       String?
  standardPrice    Float            // 標準售價
  currentPrice     Float            // 目前售價
  costPrice        Float            @default(0) // 平均成本價
  minPrice         Float            // 最低售價限制
  totalStock       Int              @default(0) // 總庫存
  availableStock   Int              @default(0) // 可售庫存
  reservedStock    Int              @default(0) // 預留庫存
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // 關聯表
  variants         ProductVariant[]
  purchaseItems    PurchaseItem[]
  saleItems        SaleItem[]
  specialPrices    CustomerSpecialPrice[]

  @@map("products")
}

enum VariantType {
  A  // 一般版
  B  // 年度限定版
  C  // 紀念版
  D  // 特殊限定版
  X  // 損傷品
}

model ProductVariant {
  id              String      @id @default(cuid())
  productId       String
  variant_code    String      @unique // P00001-A, P00001-C, P00001-X
  variantType     VariantType // A, B, C, D, X
  description     String      // "一般版", "100周年紀念版", "損傷品"
  basePrice       Float       // 基礎售價
  currentPrice    Float       // 目前售價
  discountRate    Float?      // 折扣率 (損傷品用)
  limitedEdition  Boolean     @default(false)
  productionYear  Int?
  serialNumber    String?
  condition       String      @default("正常") // 商品狀況
  stock_quantity    Int         @default(0)    // 總庫存
  reserved_stock    Int         @default(0)    // 預留庫存
  available_stock   Int         @default(0)    // 可售庫存
  cost_price        Float       @default(0)    // 實際成本
  weight_kg         Float       @default(0)    // 商品重量(kg) - 遵循DATA_MODELS.md規範
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // 關聯
  product            Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  saleItems          SaleItem[]
  inventoryMovements InventoryMovement[]

  @@unique([productId, variantType])
  @@map("product_variants")
}

model CustomerSpecialPrice {
  id              String   @id @default(cuid())
  customer_id     String
  product_id      String
  standard_price  Float    // 標準價格
  special_price   Float    // 專屬價格
  discount_amount Float    // 折扣金額
  discount_rate   Float    // 折扣率
  reason          String   // 調價原因
  effective_date  DateTime // 生效日期
  expiry_date     DateTime? // 到期日期
  is_active       Boolean  @default(true)
  notes           String?
  created_by      String   // 建立者
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // 關聯
  customer Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([customer_id, product_id])
  @@map("customer_special_prices")
}

model InventoryMovement {
  id              String   @id @default(cuid())
  variantId       String
  movementType    String   // 'PURCHASE' | 'SALE' | 'ADJUSTMENT' | 'TRANSFER'
  adjustmentType  String?  // 'ADD' | 'SUBTRACT' | 'SET' (只有ADJUSTMENT時使用)
  quantity        Int      // 異動數量
  previousStock   Int      // 異動前庫存
  newStock        Int      // 異動後庫存
  reason          String   // 異動原因
  notes           String?  // 備註
  referenceId     String?  // 關聯單據ID (採購單、銷售單等)
  referenceType   String?  // 關聯單據類型
  createdBy       String   // 操作者
  created_at      DateTime @default(now())

  // 關聯
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("inventory_movements")
}

model Purchase {
  id            String         @id @default(cuid())
  purchaseNumber String        @unique // PO20250917001
  fundingSource String         // 'COMPANY' | 'PERSONAL'
  supplier      String
  currency      String         @default("JPY")
  exchangeRate  Float
  totalAmount   Float
  status        String         @default("PENDING") // PENDING, RECEIVED, COMPLETED
  declarationNumber String?    // 報單號碼
  declarationDate   DateTime?  // 報關日期
  receivedDate      DateTime?  // 到貨日期
  notes         String?
  createdBy     String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // 關聯
  creator   User           @relation(fields: [createdBy], references: [id])
  items     PurchaseItem[]
  receipts  GoodsReceipt[]

  @@map("purchases")
}

model PurchaseItem {
  id                String   @id @default(cuid())
  purchaseId        String
  productId         String?  // 可能是新商品
  productName       String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  dutiableValue     Float?   // 完稅價格
  tariffCode        String?  // 稅則號列
  importDutyRate    Float?   // 進口稅率
  alc_percentage    Float?   // 酒精度 - 統一命名規範
  volume_ml         Int?     // 容量 - 統一命名規範
  weightKg          Float?   // 重量
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // 關聯
  purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product  Product? @relation(fields: [productId], references: [id])

  @@map("purchase_items")
}

model GoodsReceipt {
  id               String  @id @default(cuid())
  purchaseId       String
  actualQuantity   Int     // 實際到貨數量
  exchangeRate     Float   // 實際匯率
  lossType         String  // 'NONE' | 'INSPECTION' | 'RADIATION' | 'DAMAGE'
  lossQuantity     Int     @default(0) // 損失數量
  inspectionFee    Float?  // 抽驗費
  allocationMethod String  // 'VALUE' | 'QUANTITY' | 'WEIGHT'
  totalCost        Float   // 總成本
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // 關聯
  purchase         Purchase            @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  additionalCosts  AdditionalCost[]

  @@map("goods_receipts")
}

model AdditionalCost {
  id              String @id @default(cuid())
  goodsReceiptId  String
  type            String // 'SHIPPING' | 'INSPECTION' | 'DECLARATION' | 'PORT_SERVICE'
  amount          Float
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // 關聯
  goodsReceipt GoodsReceipt @relation(fields: [goodsReceiptId], references: [id], onDelete: Cascade)

  @@map("additional_costs")
}

model Sale {
  id              String       @id @default(cuid())
  saleNumber      String       @unique // SA20250917001
  customerId      String
  totalAmount     Float        // 顯示金額（投資方看到的）
  actualAmount    Float?       // 實際收取金額（僅超級管理員）
  commission      Float?       // 老闆傭金（僅超級管理員）
  fundingSource   String       // 'COMPANY' | 'PERSONAL'
  paymentTerms    PaymentTerms @default(CASH)
  isPaid          Boolean      @default(false)
  paidAt          DateTime?
  dueDate         DateTime?
  notes           String?
  createdBy       String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // 關聯
  customer Customer   @relation(fields: [customerId], references: [id])
  creator  User       @relation(fields: [createdBy], references: [id])
  items    SaleItem[]
  accountsReceivable AccountsReceivable[]

  @@map("sales")
}

model SaleItem {
  id                  String  @id @default(cuid())
  saleId              String
  productId           String
  variantId           String?
  quantity            Int
  unitPrice           Float   // 顯示單價
  actualUnitPrice     Float?  // 實際單價（僅超級管理員）
  totalPrice          Float   // 顯示總價
  actualTotalPrice    Float?  // 實際總價（僅超級管理員）
  isPersonalPurchase  Boolean @default(false) // 是否為個人調貨
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // 關聯
  sale    Sale           @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("sale_items")
}

// 審計日誌表 - 記錄敏感資料存取
model AuditLog {
  id              String   @id @default(cuid())
  userId          String   // 操作使用者ID
  userEmail       String   // 使用者Email
  userRole        Role     // 使用者角色
  action          String   // 操作類型 (READ, CREATE, UPDATE, DELETE)
  tableName       String   // 操作的表格
  recordId        String?  // 記錄ID
  sensitiveFields Json?    // 存取的敏感欄位
  ipAddress       String?  // IP位址
  userAgent       String?  // 瀏覽器資訊
  timestamp       DateTime @default(now())

  // 商業敏感資料存取記錄
  accessedActualPrice   Boolean @default(false) // 是否存取真實價格
  accessedCommission    Boolean @default(false) // 是否存取傭金資料
  accessedPersonalData  Boolean @default(false) // 是否存取個人調貨資料

  @@map("audit_logs")
}

// 🧮 會計系統模型 - Room-4 擴展

model AccountingEntry {
  id              String   @id @default(cuid())
  entryNumber     String   @unique // AE20250917001
  entryDate       DateTime // 入帳日期
  entryType       String   // 'SALE' | 'PURCHASE' | 'PAYMENT' | 'ADJUSTMENT'
  referenceId     String?  // 關聯單據ID (銷售單、採購單等)
  referenceType   String?  // 關聯單據類型
  description     String   // 摘要說明
  totalAmount     Float    // 合計金額
  isPosted        Boolean  @default(false) // 是否過帳
  notes           String?
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // 關聯
  creator         User              @relation(fields: [createdBy], references: [id])
  journalEntries  JournalEntry[]

  @@map("accounting_entries")
}

model JournalEntry {
  id                String   @id @default(cuid())
  accountingEntryId String
  accountCode       String   // 會科代碼 (1101, 4101 etc.)
  accountName       String   // 會科名稱 (現金, 銷貨收入 etc.)
  debitAmount       Float    @default(0) // 借方金額
  creditAmount      Float    @default(0) // 貸方金額
  description       String?  // 明細說明
  createdAt         DateTime @default(now())

  // 關聯
  accountingEntry   AccountingEntry @relation(fields: [accountingEntryId], references: [id], onDelete: Cascade)

  @@map("journal_entries")
}

// 應收帳款管理
model AccountsReceivable {
  id              String       @id @default(cuid())
  arNumber        String       @unique // AR20250917001
  customerId      String
  saleId          String       // 關聯銷售單
  originalAmount  Float        // 原始應收金額
  remainingAmount Float        // 剩餘應收金額
  dueDate         DateTime     // 到期日
  status          String       @default("OUTSTANDING") // OUTSTANDING, OVERDUE, PAID, PARTIAL
  daysPastDue     Int          @default(0) // 逾期天數
  notes           String?
  createdBy       String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // 關聯
  customer        Customer            @relation(fields: [customerId], references: [id])
  sale            Sale                @relation(fields: [saleId], references: [id])
  creator         User                @relation(fields: [createdBy], references: [id])
  payments        PaymentRecord[]

  @@map("accounts_receivable")
}

model PaymentRecord {
  id                     String   @id @default(cuid())
  paymentNumber          String   @unique // PMT20250917001
  accountsReceivableId   String
  paymentAmount          Float    // 付款金額
  paymentDate            DateTime // 付款日期
  paymentMethod          String   // 'CASH' | 'TRANSFER' | 'CHECK' | 'CREDIT_CARD'
  referenceNumber        String?  // 支票號碼、轉帳序號等
  notes                  String?
  createdBy              String
  createdAt              DateTime @default(now())

  // 關聯
  accountsReceivable     AccountsReceivable @relation(fields: [accountsReceivableId], references: [id])
  creator                User               @relation(fields: [createdBy], references: [id])

  @@map("payment_records")
}